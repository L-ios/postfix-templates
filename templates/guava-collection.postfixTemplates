# Guava Collection Postfix Templates

# Iterable and Iterator Operations
.split : guava split
    java.util.List      [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.partition($expr$, $size$)
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.partition($expr$, $size$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.partition($expr$, $size$)

.splitWithSameSize : guava splitWithSameSize
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.paddedPartition($expr$, $size$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.paddedPartition($expr$, $size$)

.limit : guava limit
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.limit($expr$, $size$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.limit($expr$, $size$)

.addAllTo : guava addAllTo
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.addAll($addTo$, $expr$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.addAll($addTo$, $expr$)

.removeAll : guava removeAll
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.removeAll($expr$, $target$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.removeAll($expr$, $target$)

.removeIf : guava remove if
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.removeIf($expr$, $filter$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.removeIf($expr$, $filter$)

.retainAll : guava retain all
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.retainAll($expr$, $target$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.retainAll($expr$, $target$)

.contains : guava contains
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.contains($expr$, $element$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.contains($expr$, $element$)

# Get element
.get : guava get last
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.get($expr$, $index$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.get($expr$, $index$)

.getOrDefault : guava get last
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.get($expr$, $index$, $defaultValue$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.get($expr$, $index$, $defaultValue$)

.getFirstOrDefault : guava get first or default
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.getFirst($expr$, $defaultValue$)

.getLast : guava get last
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.getLast($expr$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.getLast($expr$)

.getLastOrDefault : guava get last or default
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.getLast($expr$, $defaultValue$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.getLast($expr$, $defaultValue$)

.getOnly : guava get only
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.getOnlyElement($expr$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.getOnlyElement($expr$)

.getOnlyOrDefault : guava get only or default
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.getOnlyElement($expr$, $defaultValue$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.getOnlyElement($expr$, $defaultValue$)

# Properties
.size : guava size
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.size($expr$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.size($expr$)

.toArray : guava to array
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.toArray($expr$, $clazz$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.toArray($expr$, $clazz$)

.toString : guava to string
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.toString($expr$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.toString($expr$)

.frequency : guava frequency
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.frequency($expr$, $element$)
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.frequency($expr$, $element$)

# Convert Iterable and Iterator
.toImmutableIterable : guava toImmutableIterable
    java.lang.Iterable  [com.google.common.collect.Iterables]               →   com.google.common.collect.Iterables.unmodifiableIterable($expr$)

.toImmutableIterator : guava toImmutableIterator
    java.util.Iterator  [com.google.common.collect.Iterators]               →   com.google.common.collect.Iterators.unmodifiableIterator($expr$)

# List Operations
.reverse : guava reverse
    java.util.List      [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.reverse($expr$)

.partition : guava partition
    java.util.List      [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.partition($expr$, $size$)

# Create Lists

.asList : guava asList
    ITERABLE_OR_ARRAY   [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newArrayList($expr$)
    BOOLEAN             [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.asList($expr$, new Boolean[]{$END$})
    CHAR_LITERAL        [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.asList($expr$, new Character[]{$END$})
    BYTE_LITERAL        [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.asList($expr$, new Byte[]{$END$})
    SHORT_LITERAL       [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.asList($expr$, new Short[]{$END$})
    INT_LITERAL         [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.asList($expr$, new Integer[]{$END$})
    LONG_LITERAL        [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.asList($expr$, new Long[]{$END$})
    DOUBLE_LITERAL      [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.asList($expr$, new Double[]{$END$})
    FLOAT_LITERAL       [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.asList($expr$, new Float[]{$END$})
    NOT_PRIMITIVE       [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.asList($expr$, new $type*:expressionType(expr)$[]{$END$})

.newArrayList : guava newArrayList
    java.util.ArrayList                                                     →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.Lists]                   →   java.util.List<$expr$> $var:suggestVariableName()$ = com.google.common.collect.Lists.newArrayList();
    ARRAY               [com.google.common.collect.Lists]                   →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Lists.newArrayList($expr$);
    java.lang.Iterable  [com.google.common.collect.Lists]                   →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Lists.newArrayList($expr$);

.newLinkedList : guava newLinkedList
    java.util.LinkedList                                                    →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.Lists]                   →   java.util.List<$expr$> $var:suggestVariableName()$ = com.google.common.collect.Lists.newLinkedList();
    ARRAY               [com.google.common.collect.Lists]                   →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Lists.newLinkedList(Lists.newArrayList($expr$));
    java.lang.Iterable  [com.google.common.collect.Lists]                   →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Lists.newLinkedList($expr$);

.newCopyOnWriteArrayList : guava newCopyOnWriteArrayList
    java.util.concurrent.CopyOnWriteArrayList                               →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.Lists]                   →   java.util.List<$expr$> $var:suggestVariableName()$ = com.google.common.collect.Lists.newCopyOnWriteArrayList();
    ARRAY               [com.google.common.collect.Lists]                   →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Lists.newCopyOnWriteArrayList(Lists.newArrayList($expr$));
    java.lang.Iterable  [com.google.common.collect.Lists]                   →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Lists.newCopyOnWriteArrayList($expr$);

.newImmutableList : guava convert to immutable list
    com.google.common.collect.ImmutableList                                 →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.ImmutableList]           →   java.util.List<$expr$> $var:suggestVariableName()$ = com.google.common.collect.ImmutableList.of($END$);
    ARRAY               [com.google.common.collect.ImmutableList]           →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.ImmutableList.copyOf($expr$);
    java.lang.Iterable  [com.google.common.collect.ImmutableList]           →   java.util.List<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.ImmutableList.copyOf($expr$);

.newImmutableSortedList : guava convert to immutable sorted list
    ARRAY               [com.google.common.collect.ImmutableList]           →   com.google.common.collect.ImmutableList.sortedCopyOf(ImmutableList.copyOf($expr$))
    java.lang.Iterable  [com.google.common.collect.ImmutableList]           →   com.google.common.collect.ImmutableList.sortedCopyOf($expr$)
    java.util.Iterator  [com.google.common.collect.ImmutableList]           →   com.google.common.collect.ImmutableList.sortedCopyOf(ImmutableList.copyOf($expr$))


# Convert to List
.toArrayList : guava toArrayList
    java.util.ArrayList                                                     →   [SKIP]
    ARRAY               [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newArrayList($expr$)
    java.lang.Iterable  [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newArrayList($expr$)
    java.util.Iterator  [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newArrayList($expr$)

.toLinkedList : guava newLinkedList
    java.util.LinkedList                                                    →   [SKIP]
    ARRAY               [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newLinkedList(Lists.newArrayList($expr$))
    java.lang.Iterable  [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newLinkedList($expr$)
    java.util.Iterator  [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newLinkedList(Lists.newArrayList($expr$))

.toCopyOnWriteArrayList : guava toCopyOnWriteArrayList
    java.util.concurrent.CopyOnWriteArrayList                               →   [SKIP]
    ARRAY               [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newCopyOnWriteArrayList(Lists.newArrayList($expr$))
    java.lang.Iterable  [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newCopyOnWriteArrayList($expr$)
    java.util.Iterator  [com.google.common.collect.Lists]                   →   com.google.common.collect.Lists.newCopyOnWriteArrayList(Lists.newArrayList($expr$))

.toImmutableList : guava convert to immutable list
    com.google.common.collect.ImmutableList                                 →   [SKIP]
    ARRAY               [com.google.common.collect.ImmutableList]           →   com.google.common.collect.ImmutableList.copyOf($expr$)
    java.lang.Iterable  [com.google.common.collect.ImmutableList]           →   com.google.common.collect.ImmutableList.copyOf($expr$)
    java.util.Iterator  [com.google.common.collect.ImmutableList]           →   com.google.common.collect.ImmutableList.copyOf($expr$)

.toImmutableSortedList : guava convert to immutable sorted list
    ARRAY               [com.google.common.collect.ImmutableList]           →   com.google.common.collect.ImmutableList.sortedCopyOf(ImmutableList.copyOf($expr$))
    java.lang.Iterable  [com.google.common.collect.ImmutableList]           →   com.google.common.collect.ImmutableList.sortedCopyOf($expr$)
    java.util.Iterator  [com.google.common.collect.ImmutableList]           →   com.google.common.collect.ImmutableList.sortedCopyOf(com.google.common.collect.ImmutableList.copyOf($expr$))

# Set Operation
.union : guava set union
    java.util.Set       [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.union($expr$, $other$)

.intersection : guava set  intersection
    java.util.Set       [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.intersection($expr$, $other$)

.difference : guava set  difference
    java.util.Set       [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.difference($expr$, $other$)

.symmetricDifference : guava set  difference
    java.util.Set       [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.symmetricDifference($expr$, $other$)

.combinations : guava set combinations
    java.util.Set       [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.combinations($expr$, int size)

.powerset : guava set power set
    java.util.Set       [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.powerSet($expr$)

.cartesianProduct : guava set cartesian product
    java.util.List      [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.cartesianProduct($expr$, $other$)
    java.util.Set       [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.cartesianProduct($expr$, $other$)

# Create Set
.newIdentityHashSet : guava newIdentityHashSet
    CLASS               [com.google.common.collect.Sets]                    →   java.util.Set<$expr$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newIdentityHashSet();

.newHashSet : guava newHashSet
    java.util.HashSet                                                       →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.Sets]                    →   java.util.Set<$expr$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newHashSet();
    ARRAY               [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newHashSet($expr$);
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newHashSet($expr$);

.newConcurrentHashSet : guava newConcurrentHashSet
    CLASS               [com.google.common.collect.Sets]                    →   java.util.Set<$expr$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newConcurrentHashSet();
    ARRAY               [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newConcurrentHashSet(Sets.newHashSet($expr$));
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newConcurrentHashSet($expr$);

.newLinkedHashSet : guava newLinkedHashSet
    java.util.LinkedHashSet                                                 →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.Sets]                    →   java.util.Set<$expr$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newLinkedHashSet();
    ARRAY               [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newLinkedHashSet(Sets.newHashSet($expr$));
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newLinkedHashSet($expr$);

.newTreeSet : guava newTreeSet
    java.util.TreeSet                                                       →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.Sets]                    →   java.util.Set<$expr$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newTreeSet();
    ARRAY               [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newTreeSet(Sets.newHashSet($expr$));
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newTreeSet($expr$);

.newCopyOnWriteArraySet : guava newCopyOnWriteArraySet
    java.util.concurrent.CopyOnWriteArraySet                                →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.Sets]                    →   java.util.Set<$expr$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newCopyOnWriteArraySet();
    ARRAY               [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newCopyOnWriteArraySet(Sets.newHashSet($expr$));
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.Sets.newCopyOnWriteArraySet($expr$);

.newImmutableSet : guava newImmutableSet
    com.google.common.collect.ImmutableSet                                  →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.ImmutableSet]            →   java.util.Set<$expr$> $var:suggestVariableName()$ = com.google.common.collect.ImmutableSet.of($END$);
    ARRAY               [com.google.common.collect.ImmutableSet]            →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.ImmutableSet.copyOf($expr$);
    java.lang.Iterable  [com.google.common.collect.ImmutableSet]            →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.ImmutableSet.copyOf($expr$);

.newImmutableSortedSet : guava newImmutableSet
    com.google.common.collect.ImmutableSortedSet                            →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = $expr$;
    CLASS               [com.google.common.collect.ImmutableSortedSet]      →   java.util.Set<$expr$> $var:suggestVariableName()$ = com.google.common.collect.ImmutableSortedSet.of($END$);
    ARRAY               [com.google.common.collect.ImmutableSortedSet]      →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.ImmutableSortedSet.copyOf($expr$);
    java.lang.Iterable  [com.google.common.collect.ImmutableSortedSet]      →   java.util.Set<$type*:iterableComponentType(expr)$> $var:suggestVariableName()$ = com.google.common.collect.ImmutableSortedSet.copyOf($expr$);



# Convert to Set
.asSet : guava asSet
    NON_VOID            [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newHashSet($expr$)

.toHashSet : guava create new hash set
    java.util.HashSet                                                       →   [SKIP]
    ARRAY               [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newHashSet($expr$)
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newHashSet($expr$)
    java.util.Iterator  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newHashSet($expr$)

.toConcurrentHashSet : guava create concurrent hash set
    ARRAY               [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newConcurrentHashSet(Sets.newHashSet($expr$))
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newConcurrentHashSet($expr$)
    java.util.Iterator  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newConcurrentHashSet(Sets.newHashSet($expr$))

.toLinkedHashSet : guava convert to linked hash set
    java.util.LinkedHashSet                                                 →   [SKIP]
    ARRAY               [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newLinkedHashSet(Sets.newHashSet($expr$))
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newLinkedHashSet($expr$)
    java.util.Iterator  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newLinkedHashSet(Sets.newHashSet($expr$))

.toTreeSet : guava convert to tree set
    java.util.TreeSet                                                       →   [SKIP]
    ARRAY               [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newTreeSet(Sets.newHashSet($expr$))
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newTreeSet($expr$)
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newTreeSet(Sets.newHashSet($expr$))

.toCopyOnWriteArraySet : guava toCopyOnWriteArraySet
    java.util.concurrent.CopyOnWriteArraySet                                →   [SKIP]
    ARRAY               [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newCopyOnWriteArraySet(Sets.newHashSet($expr$))
    java.lang.Iterable  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newCopyOnWriteArraySet($expr$)
    java.util.Iterator  [com.google.common.collect.Sets]                    →   com.google.common.collect.Sets.newCopyOnWriteArraySet(Sets.newHashSet($expr$))

.toImmutableSet : guava convert to immutable set
    com.google.common.collect.ImmutableSet                                  →   [SKIP]
    ARRAY               [com.google.common.collect.ImmutableSet]            →   com.google.common.collect.ImmutableSet.copyOf($expr$)
    java.lang.Iterable  [com.google.common.collect.ImmutableSet]            →   com.google.common.collect.ImmutableSet.copyOf($expr$)
    java.util.Iterator  [com.google.common.collect.ImmutableSet]            →   com.google.common.collect.ImmutableSet.copyOf($expr$)

.toImmutableSortedSet : guava convert to immutable sorted set
    com.google.common.collect.ImmutableSortedSet                            →   [SKIP]
    ARRAY               [com.google.common.collect.ImmutableSortedSet]      →   com.google.common.collect.ImmutableSortedSet.copyOf($expr$)
    java.lang.Iterable  [com.google.common.collect.ImmutableSortedSet]      →   com.google.common.collect.ImmutableSortedSet.copyOf($expr$)
    java.util.Iterator  [com.google.common.collect.ImmutableSortedSet]      →   com.google.common.collect.ImmutableSortedSet.copyOf($expr$)
